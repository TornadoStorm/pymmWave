import abc
from .data_model import DopplerPointCloud as DopplerPointCloud, ImuVelocityData as ImuVelocityData, MeanFloatValue as MeanFloatValue, Pose as Pose
from abc import ABC, abstractmethod
from typing import Optional

class Algorithm(ABC, metaclass=abc.ABCMeta):
    @abstractmethod
    def reset(self) -> None: ...

class SimpleMeanDistance(Algorithm):
    def __init__(self) -> None: ...
    def run(self, input: DopplerPointCloud) -> MeanFloatValue: ...
    def reset(self) -> None: ...

class IMUAdjustedPersistedData(Algorithm):
    def __init__(self, steps_to_persist: int) -> None: ...
    def reset(self) -> None: ...
    def change_persisted_steps(self, new_steps: int) -> bool: ...
    def run(self, input_cloud: DopplerPointCloud, imu_in: ImuVelocityData) -> DopplerPointCloud: ...

class CloudEstimatedIMU(Algorithm):
    def __init__(self) -> None: ...
    def modify_minimum_datapoints(self, val: int) -> None: ...
    def run(self, data: DopplerPointCloud) -> Optional[ImuVelocityData]: ...
    def reset(self) -> None: ...

class EstimatedRelativePosition(Algorithm):
    def __init__(self) -> None: ...
    def run(self, imu_vel: ImuVelocityData) -> Pose: ...
    def reset(self) -> None: ...
