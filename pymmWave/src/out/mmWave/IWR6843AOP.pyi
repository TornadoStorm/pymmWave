import numpy as np
from .constants import ASYNC_SLEEP as ASYNC_SLEEP, BYTE_MULT as BYTE_MULT, MAGIC_NUMBER as MAGIC_NUMBER, TLV_type as TLV_type
from .data_model import DopplerPointCloud as DopplerPointCloud
from .sensor import Sensor as Sensor
from typing import Any, Optional

class IWR6843AOP(Sensor):
    name: Any = ...
    def __init__(self, name: str, verbose: bool=...) -> None: ...
    class _light_doppler_cloud:
        x_coord: np.ndarray
        y_coord: np.ndarray
        z_coord: np.ndarray
        doppler: np.ndarray
        def __init__(self, x_coord: Any, y_coord: Any, z_coord: Any, doppler: Any) -> None: ...
    class _frame:
        packet: float
        idxPacket: float
        header: float
        detObj: float
        rp: float
        np: float
        tlv_version: bytes
        tlv_version_uint16: int
        tlv_platform: int
        frameNumber: int
        numDetectedObj: int = ...
        detectedPoints_byteVecIdx: int = ...
    def connect_config(self, com_port: str, baud_rate: int, timeout: int=...) -> bool: ...
    def connect_data(self, com_port: str, baud_rate: int, timeout: int=...) -> bool: ...
    def is_alive(self) -> bool: ...
    def type(self) -> Sensor.SensorType: ...
    def model(self) -> str: ...
    def send_config(self, config: list[str], max_retries: int=...) -> bool: ...
    async def start_sensor(self) -> None: ...
    async def get_data(self) -> DopplerPointCloud: ...
    def get_data_nowait(self) -> Optional[DopplerPointCloud]: ...
    def stop_sensor(self) -> None: ...
    def configure_filtering(self, doppler_filtering: float=...) -> bool: ...
    def get_update_freq(self) -> float: ...
    def __eq__(self, o: object) -> bool: ...
